{
  "version": 3,
  "sources": ["../src/index.ts"],
  "sourcesContent": ["import { parse, stringify } from \"querystring\";\n\nabstract class Punycode {\n  protected static readonly INITIAL_N = 0x80;\n  protected static readonly INITIAL_BIAS = 72;\n  protected static readonly DELIMITER = \"\\x2D\";\n  protected static readonly BASE = 36;\n  protected static readonly DAMP = 700;\n  protected static readonly T_MIN = 1;\n  protected static readonly T_MAX = 26;\n  protected static readonly SKEW = 38;\n  protected static readonly MAX_INT = 0x7fffffff;\n\n  protected static utf16decode(input: string): number[] {\n    let output = [];\n    let index = 0;\n    let length = input.length;\n    let value;\n    let extra;\n    while (index < length) {\n      value = input.charCodeAt(index++);\n      if ((value & 0xf800) === 0xd800) {\n        extra = input.charCodeAt(index++);\n        if ((value & 0xfc00) !== 0xd800 || (extra & 0xfc00) !== 0xdc00) {\n          throw new RangeError(\n            \"Punycode UTF-16 decode, illegal UTF-16 sequence\"\n          );\n        }\n        value = ((value & 0x3ff) << 10) + (extra & 0x3ff) + 0x10000;\n      }\n      output.push(value);\n    }\n    return output;\n  }\n  protected static utf16encode(input: string[]): string {\n    let output = [];\n    let index = 0;\n    let length = input.length;\n    let value;\n    while (index < length) {\n      value = input[index++];\n      if ((value & 0xf800) === 0xd800) {\n        throw new RangeError(\"Punycode UTF-16 encode, illegal UTF-16 value\");\n      }\n      if (value > 0xffff) {\n        value -= 0x10000;\n        output.push(String.fromCharCode(((value >>> 10) & 0x3ff) | 0xd800));\n        value = 0xdc00 | (value & 0x3ff);\n      }\n      output.push(String.fromCharCode(value));\n    }\n    return output.join(\"\");\n  }\n\n  protected static decodeDigit(charPoint: number): number {\n    return charPoint - 48 < 10\n      ? charPoint - 22\n      : charPoint - 65 < 26\n        ? charPoint - 65\n        : charPoint - 97 < 26\n          ? charPoint - 97\n          : Punycode.BASE;\n  }\n\n  protected static encodeDigit(digit: number, flag: 0 | 1): number {\n    // @ts-ignore\n    return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);\n  }\n\n  protected static adapt(\n    delta: number,\n    numPoints: number,\n    firstTime: boolean = false\n  ): number {\n    let index;\n    delta = firstTime ? Math.floor(delta / Punycode.DAMP) : delta >> 1;\n    delta += Math.floor(delta / numPoints);\n    for (\n      index = 0;\n      delta > ((Punycode.BASE - Punycode.T_MIN) * Punycode.T_MAX) >> 1;\n      index += Punycode.BASE\n    ) {\n      delta = Math.floor(delta / (Punycode.BASE - Punycode.T_MIN));\n    }\n    return Math.floor(\n      index +\n      ((Punycode.BASE - Punycode.T_MIN + 1) * delta) / (delta + Punycode.SKEW)\n    );\n  }\n\n  protected static encodeBasic(bcp: number, flag: boolean = false): number {\n    // @ts-ignore\n    bcp -= (bcp - 97 < 26) << 5;\n    // @ts-ignore\n    return bcp + ((!flag && bcp - 65 < 26) << 5);\n  }\n\n  protected static decode(\n    input: string,\n    shouldRestoreCase: boolean = true\n  ): string {\n    const output = [];\n    const caseFlags = [];\n    const inputLength = input.length;\n    let out, bias, basic, j, ic, oldIndex, w, k, digit, t, len;\n    let initialN = Punycode.INITIAL_N;\n    let index = 0;\n    bias = Punycode.INITIAL_BIAS;\n    basic = input.lastIndexOf(Punycode.DELIMITER);\n    if (basic < 0) {\n      basic = 0;\n    }\n    for (j = 0; j < basic; ++j) {\n      if (shouldRestoreCase)\n        caseFlags[output.length] = input.charCodeAt(j) - 65 < 26;\n      if (input.charCodeAt(j) >= 0x80) {\n        throw new RangeError(\"Punycode illegal input >= 0x80\");\n      }\n      output.push(input.charCodeAt(j));\n    }\n    for (ic = basic > 0 ? basic + 1 : 0; ic < inputLength; ) {\n      for (oldIndex = index, w = 1, k = Punycode.BASE; ; k += Punycode.BASE) {\n        if (ic >= inputLength) {\n          throw RangeError(\"Punycode bad input 1\");\n        }\n        digit = Punycode.decodeDigit(input.charCodeAt(ic++));\n        if (digit >= Punycode.BASE) {\n          throw RangeError(\"Punycode bad input 2\");\n        }\n        if (digit > Math.floor((Punycode.MAX_INT - index) / w)) {\n          throw RangeError(\"Punycode overflow 1\");\n        }\n        index += digit * w;\n        t =\n          k <= bias\n            ? Punycode.T_MIN\n            : k >= bias + Punycode.T_MAX\n              ? Punycode.T_MAX\n              : k - bias;\n        if (digit < t) {\n          break;\n        }\n        if (w > Math.floor(Punycode.MAX_INT / (Punycode.BASE - t))) {\n          throw RangeError(\"Punycode overflow 2\");\n        }\n        w *= Punycode.BASE - t;\n      }\n      out = output.length + 1;\n      bias = Punycode.adapt(index - oldIndex, out, oldIndex === 0);\n      if (Math.floor(index / out) > Punycode.MAX_INT - initialN) {\n        throw RangeError(\"Punycode overflow 3\");\n      }\n      initialN += Math.floor(index / out);\n      index %= out;\n      if (shouldRestoreCase) {\n        caseFlags.splice(index, 0, input.charCodeAt(ic - 1) - 65 < 26);\n      }\n      output.splice(index, 0, initialN);\n      index++;\n    }\n    if (shouldRestoreCase) {\n      for (index = 0, len = output.length; index < len; index++) {\n        if (caseFlags[index]) {\n          output[index] = String.fromCharCode(output[index])\n            .toUpperCase()\n            .charCodeAt(0);\n        }\n      }\n    }\n    return Punycode.utf16encode(output);\n  }\n\n  protected static encode(\n    input: string,\n    shouldPreserveCase: boolean = false\n  ): string {\n    let head, base, index, max, q, k, t, ijv, caseFlags;\n    if (shouldPreserveCase) {\n      caseFlags = Punycode.utf16decode(input);\n    }\n    const inputNumbers = Punycode.utf16decode(input.toLowerCase());\n    const inputLength = inputNumbers.length;\n    if (shouldPreserveCase) {\n      for (index = 0; index < inputLength; index++) {\n        caseFlags[index] = inputNumbers[index] != caseFlags[index];\n      }\n    }\n    const output = [];\n    let initialN = Punycode.INITIAL_N;\n    let delta = 0;\n    let bias = Punycode.INITIAL_BIAS;\n    for (index = 0; index < inputLength; ++index) {\n      if (inputNumbers[index] < 0x80) {\n        output.push(\n          String.fromCharCode(\n            caseFlags\n              ? Punycode.encodeBasic(inputNumbers[index], caseFlags[index])\n              : inputNumbers[index]\n          )\n        );\n      }\n    }\n    head = base = output.length;\n    if (base > 0) {\n      output.push(Punycode.DELIMITER);\n    }\n    while (head < inputLength) {\n      for (max = Punycode.MAX_INT, index = 0; index < inputLength; ++index) {\n        ijv = inputNumbers[index];\n        if (ijv >= initialN && ijv < max) max = ijv;\n      }\n      if (\n        max - initialN >\n        Math.floor((Punycode.MAX_INT - delta) / (head + 1))\n      ) {\n        throw RangeError(\"Punycode overflow 1\");\n      }\n      delta += (max - initialN) * (head + 1);\n      initialN = max;\n      for (index = 0; index < inputLength; ++index) {\n        ijv = inputNumbers[index];\n        if (ijv < initialN) {\n          if (++delta > Punycode.MAX_INT) {\n            throw RangeError(\"Punycode overflow 2\");\n          }\n        }\n        if (ijv == initialN) {\n          for (q = delta, k = Punycode.BASE; ; k += Punycode.BASE) {\n            t =\n              k <= bias\n                ? Punycode.T_MIN\n                : k >= bias + Punycode.T_MAX\n                  ? Punycode.T_MAX\n                  : k - bias;\n            if (q < t) break;\n            output.push(\n              String.fromCharCode(\n                Punycode.encodeDigit(t + ((q - t) % (Punycode.BASE - t)), 0)\n              )\n            );\n            q = Math.floor((q - t) / (Punycode.BASE - t));\n          }\n          output.push(\n            String.fromCharCode(\n              Punycode.encodeDigit(\n                q,\n                shouldPreserveCase && caseFlags[index] ? 1 : 0\n              )\n            )\n          );\n          bias = Punycode.adapt(delta, head + 1, head == base);\n          delta = 0;\n          ++head;\n        }\n      }\n      ++delta;\n      ++initialN;\n    }\n    return output.join(\"\");\n  }\n\n  public static toAscii(\n    domain: string,\n    shouldPreserveCase: boolean = true\n  ): string {\n    const domainArray = domain.split(\".\");\n    const out = [];\n    for (let index = 0; index < domainArray.length; ++index) {\n      const element = domainArray[index];\n      out.push(\n        element.match(/[^A-Za-z0-9-]/)\n          ? \"xn--\" + Punycode.encode(element, shouldPreserveCase)\n          : element\n      );\n    }\n    return out.join(\".\");\n  }\n\n  public static toUnicode(\n    domain: string,\n    shouldRestoreCase: boolean = true\n  ): string {\n    const domainArray = domain.split(\".\");\n    const out = [];\n    for (let index = 0; index < domainArray.length; ++index) {\n      const element = domainArray[index];\n      out.push(\n        element.match(/^xn--/)\n          ? Punycode.decode(element.slice(4), shouldRestoreCase)\n          : element\n      );\n    }\n    return out.join(\".\");\n  }\n}\n\nfunction unicodeToAscii(\n  text: string,\n  onError: string = text,\n  urlEncode: boolean = true,\n  skipOnValid: boolean = true\n): string {\n  try {\n    let result;\n    if (urlEncode) {\n      result = stringify({ \"\": Punycode.toAscii(text) }, undefined, \" \").trim();\n    } else {\n      result = Punycode.toAscii(text);\n    }\n    if (result === `xn--${text}` || result === `xn--${text}-`) {\n      return text;\n    }\n    if (urlEncode && skipOnValid) {\n      if (text.includes(\"@\") || text.includes(\"#\")) {\n        const clean = text.replace(/@/g, \"\").replace(/#/g, \"\");\n        const skip = result\n          .replace(/%40/g, \"\")\n          .replace(/%23/g, \"\")\n          .replace(/[-.]+/g, \".\");\n        console.dir({ clean, skip });\n        if (skip === `xn.${clean}` || skip === `xn.${clean}-`) {\n          return text;\n        }\n      }\n    }\n    return result;\n  } catch {\n    return onError;\n  }\n}\n\nfunction asciiToUnicode(\n  text: string,\n  onError: string = text,\n  urlDecode: boolean = true\n): string {\n  try {\n    if (urlDecode) {\n      return Punycode.toUnicode(Object.keys(parse(text))[0]);\n    } else {\n      return Punycode.toUnicode(text);\n    }\n  } catch {\n    return onError;\n  }\n}\n\nexport { asciiToUnicode, unicodeToAscii };\n"],
  "mappings": "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",
  "names": []
}
