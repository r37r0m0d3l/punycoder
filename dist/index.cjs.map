{
  "version": 3,
  "sources": ["../src/index.ts"],
  "sourcesContent": ["import { parse, stringify } from \"querystring\";\n\nabstract class Punycode {\n  protected static readonly BASE = 36;\n  protected static readonly DAMP = 700;\n  protected static readonly DELIMITER = \"\\x2D\";\n  protected static readonly INITIAL_BIAS = 72;\n  protected static readonly INITIAL_N = 0x80;\n  protected static readonly MAX_INT = 0x7fffffff;\n  protected static readonly SKEW = 38;\n  protected static readonly T_MAX = 26;\n  protected static readonly T_MIN = 1;\n\n  protected static utf16decode(input: string): number[] {\n    const length = input.length;\n    const output = [];\n    let index = 0;\n    let value;\n    let extra;\n    while (index < length) {\n      value = input.charCodeAt(index++);\n      if ((value & 0xf800) === 0xd800) {\n        extra = input.charCodeAt(index++);\n        if ((value & 0xfc00) !== 0xd800 || (extra & 0xfc00) !== 0xdc00) {\n          throw new RangeError(\"Punycode UTF-16 decode, illegal UTF-16 sequence\");\n        }\n        value = ((value & 0x3ff) << 10) + (extra & 0x3ff) + 0x10000;\n      }\n      output.push(value);\n    }\n    return output;\n  }\n  protected static utf16encode(input: string[]): string {\n    const length = input.length;\n    const output = [];\n    let index = 0;\n    let value;\n    while (index < length) {\n      value = input[index++];\n      if ((value & 0xf800) === 0xd800) {\n        throw new RangeError(\"Punycode UTF-16 encode, illegal UTF-16 value\");\n      }\n      if (value > 0xffff) {\n        value -= 0x10000;\n        output.push(String.fromCharCode(((value >>> 10) & 0x3ff) | 0xd800));\n        value = 0xdc00 | (value & 0x3ff);\n      }\n      output.push(String.fromCharCode(value));\n    }\n    return output.join(\"\");\n  }\n\n  protected static decodeDigit(charPoint: number): number {\n    return charPoint - 48 < 10\n      ? charPoint - 22\n      : charPoint - 65 < 26\n      ? charPoint - 65\n      : charPoint - 97 < 26\n      ? charPoint - 97\n      : Punycode.BASE;\n  }\n\n  protected static encodeDigit(digit: number, flag: 0 | 1): number {\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    return digit + 22 + 75 * (digit < 26) - ((flag !== 0) << 5);\n  }\n\n  protected static adapt(delta: number, numPoints: number, firstTime = false): number {\n    let index;\n    delta = firstTime ? Math.floor(delta / Punycode.DAMP) : delta >> 1;\n    delta += Math.floor(delta / numPoints);\n    for (index = 0; delta > ((Punycode.BASE - Punycode.T_MIN) * Punycode.T_MAX) >> 1; index += Punycode.BASE) {\n      delta = Math.floor(delta / (Punycode.BASE - Punycode.T_MIN));\n    }\n    return Math.floor(index + ((Punycode.BASE - Punycode.T_MIN + 1) * delta) / (delta + Punycode.SKEW));\n  }\n\n  protected static encodeBasic(bcp: number, flag = false): number {\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    bcp -= (bcp - 97 < 26) << 5;\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    return bcp + ((!flag && bcp - 65 < 26) << 5);\n  }\n\n  protected static decode(input: string, shouldRestoreCase = true): string {\n    const output = [];\n    const caseFlags = [];\n    const inputLength = input.length;\n    let out, bias, basic, indexCharCode, ic, oldIndex, width, key, digit, track, len;\n    let initialN = Punycode.INITIAL_N;\n    let index = 0;\n    bias = Punycode.INITIAL_BIAS;\n    basic = input.lastIndexOf(Punycode.DELIMITER);\n    if (basic < 0) {\n      basic = 0;\n    }\n    for (indexCharCode = 0; indexCharCode < basic; ++indexCharCode) {\n      if (shouldRestoreCase) {\n        caseFlags[output.length] = input.charCodeAt(indexCharCode) - 65 < 26;\n      }\n      if (input.charCodeAt(indexCharCode) >= 0x80) {\n        throw new RangeError(\"Punycode illegal input >= 0x80\");\n      }\n      output.push(input.charCodeAt(indexCharCode));\n    }\n    for (ic = basic > 0 ? basic + 1 : 0; ic < inputLength; ) {\n      for (oldIndex = index, width = 1, key = Punycode.BASE; ; key += Punycode.BASE) {\n        if (ic >= inputLength) {\n          throw RangeError(\"Punycode bad input 1\");\n        }\n        digit = Punycode.decodeDigit(input.charCodeAt(ic++));\n        if (digit >= Punycode.BASE) {\n          throw RangeError(\"Punycode bad input 2\");\n        }\n        if (digit > Math.floor((Punycode.MAX_INT - index) / width)) {\n          throw RangeError(\"Punycode overflow 1\");\n        }\n        index += digit * width;\n        track = key <= bias ? Punycode.T_MIN : key >= bias + Punycode.T_MAX ? Punycode.T_MAX : key - bias;\n        if (digit < track) {\n          break;\n        }\n        if (width > Math.floor(Punycode.MAX_INT / (Punycode.BASE - track))) {\n          throw RangeError(\"Punycode overflow 2\");\n        }\n        width *= Punycode.BASE - track;\n      }\n      out = output.length + 1;\n      bias = Punycode.adapt(index - oldIndex, out, oldIndex === 0);\n      if (Math.floor(index / out) > Punycode.MAX_INT - initialN) {\n        throw RangeError(\"Punycode overflow 3\");\n      }\n      initialN += Math.floor(index / out);\n      index %= out;\n      if (shouldRestoreCase) {\n        caseFlags.splice(index, 0, input.charCodeAt(ic - 1) - 65 < 26);\n      }\n      output.splice(index, 0, initialN);\n      index++;\n    }\n    if (shouldRestoreCase) {\n      for (index = 0, len = output.length; index < len; index++) {\n        if (caseFlags[index]) {\n          output[index] = String.fromCharCode(output[index]).toUpperCase().charCodeAt(0);\n        }\n      }\n    }\n    return Punycode.utf16encode(output);\n  }\n\n  protected static encode(input: string, shouldPreserveCase = false): string {\n    let head, index, max, digit, key, track, ijv, caseFlags;\n    if (shouldPreserveCase) {\n      caseFlags = Punycode.utf16decode(input);\n    }\n    const inputNumbers = Punycode.utf16decode(input.toLowerCase());\n    const inputLength = inputNumbers.length;\n    if (shouldPreserveCase) {\n      for (index = 0; index < inputLength; index++) {\n        caseFlags[index] = inputNumbers[index] !== caseFlags[index];\n      }\n    }\n    const output = [];\n    let initialN = Punycode.INITIAL_N;\n    let delta = 0;\n    let bias = Punycode.INITIAL_BIAS;\n    for (index = 0; index < inputLength; ++index) {\n      if (inputNumbers[index] < 0x80) {\n        output.push(\n          String.fromCharCode(\n            caseFlags ? Punycode.encodeBasic(inputNumbers[index], caseFlags[index]) : inputNumbers[index],\n          ),\n        );\n      }\n    }\n    const base = output.length;\n    head = output.length;\n    if (base > 0) {\n      output.push(Punycode.DELIMITER);\n    }\n    while (head < inputLength) {\n      for (max = Punycode.MAX_INT, index = 0; index < inputLength; ++index) {\n        ijv = inputNumbers[index];\n        if (ijv >= initialN && ijv < max) max = ijv;\n      }\n      if (max - initialN > Math.floor((Punycode.MAX_INT - delta) / (head + 1))) {\n        throw RangeError(\"Punycode overflow 1\");\n      }\n      delta += (max - initialN) * (head + 1);\n      initialN = max;\n      for (index = 0; index < inputLength; ++index) {\n        ijv = inputNumbers[index];\n        if (ijv < initialN) {\n          if (++delta > Punycode.MAX_INT) {\n            throw RangeError(\"Punycode overflow 2\");\n          }\n        }\n        if (ijv === initialN) {\n          for (digit = delta, key = Punycode.BASE; ; key += Punycode.BASE) {\n            track = key <= bias ? Punycode.T_MIN : key >= bias + Punycode.T_MAX ? Punycode.T_MAX : key - bias;\n            if (digit < track) break;\n            output.push(\n              String.fromCharCode(Punycode.encodeDigit(track + ((digit - track) % (Punycode.BASE - track)), 0)),\n            );\n            digit = Math.floor((digit - track) / (Punycode.BASE - track));\n          }\n          output.push(String.fromCharCode(Punycode.encodeDigit(digit, shouldPreserveCase && caseFlags[index] ? 1 : 0)));\n          bias = Punycode.adapt(delta, head + 1, head === base);\n          delta = 0;\n          ++head;\n        }\n      }\n      ++delta;\n      ++initialN;\n    }\n    return output.join(\"\");\n  }\n\n  public static toAscii(domain: string, shouldPreserveCase = true): string {\n    const domainArray = domain.split(\".\");\n    const out = [];\n    for (let index = 0; index < domainArray.length; ++index) {\n      const element = domainArray[index];\n      out.push(element.match(/[^A-Za-z0-9-]/) ? \"xn--\" + Punycode.encode(element, shouldPreserveCase) : element);\n    }\n    return out.join(\".\");\n  }\n\n  public static toUnicode(domain: string, shouldRestoreCase = true): string {\n    const domainArray = domain.split(\".\");\n    const out = [];\n    for (let index = 0; index < domainArray.length; ++index) {\n      const element = domainArray[index];\n      out.push(element.match(/^xn--/) ? Punycode.decode(element.slice(4), shouldRestoreCase) : element);\n    }\n    return out.join(\".\");\n  }\n}\n\n/**\n * @name unicodeToAscii\n * @description Converts unicode domain names to ASCII.\n * @param {string} [text]\n * @param {string=} [onError=text]\n * @param {boolean=} [urlEncode=true]\n * @param {boolean=} [skipOnValid=true]\n * @returns {string}\n */\nfunction unicodeToAscii(text: string, onError: string = text, urlEncode = true, skipOnValid = true): string {\n  try {\n    let result;\n    if (urlEncode) {\n      result = stringify({ \"\": Punycode.toAscii(text) }, undefined, \" \").trim();\n    } else {\n      result = Punycode.toAscii(text);\n    }\n    if (result === `xn--${text}` || result === `xn--${text}-`) {\n      return text;\n    }\n    if (urlEncode && skipOnValid) {\n      if (text.includes(\"@\") || text.includes(\"#\")) {\n        const clean = text.replace(/@/g, \"\").replace(/#/g, \"\");\n        const skip = result.replace(/%40/g, \"\").replace(/%23/g, \"\").replace(/[-.]+/g, \".\");\n        if (skip === `xn.${clean}` || skip === `xn.${clean}-`) {\n          return text;\n        }\n      }\n    }\n    return result;\n  } catch {\n    return onError;\n  }\n}\n\n/**\n * @name asciiToUnicode\n * @description Converts an ASCII domain name to Unicode.\n * @param {string} [text]\n * @param {string=} [onError=text]\n * @param {boolean} [urlDecode=true]\n * @returns {string}\n */\nfunction asciiToUnicode(text: string, onError: string = text, urlDecode = true): string {\n  try {\n    if (urlDecode) {\n      return Punycode.toUnicode(Object.keys(parse(text))[0]);\n    } else {\n      return Punycode.toUnicode(text);\n    }\n  } catch {\n    return onError;\n  }\n}\n\nexport { asciiToUnicode, unicodeToAscii };\n"],
  "mappings": "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",
  "names": ["src_exports", "__export", "asciiToUnicode", "unicodeToAscii", "__toCommonJS", "import_querystring", "_Punycode", "input", "length", "output", "index", "value", "extra", "charPoint", "digit", "flag", "delta", "numPoints", "firstTime", "bcp", "shouldRestoreCase", "caseFlags", "inputLength", "out", "bias", "basic", "indexCharCode", "ic", "oldIndex", "width", "key", "track", "len", "initialN", "shouldPreserveCase", "head", "max", "ijv", "inputNumbers", "base", "domain", "domainArray", "element", "Punycode", "text", "onError", "urlEncode", "skipOnValid", "result", "clean", "skip", "urlDecode"]
}
